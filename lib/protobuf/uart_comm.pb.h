// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uart_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uart_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uart_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uart_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uart_5fcomm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uart_5fcomm_2eproto;
namespace uart {
namespace comm {
class FnState;
struct FnStateDefaultTypeInternal;
extern FnStateDefaultTypeInternal _FnState_default_instance_;
class MessageK2D;
struct MessageK2DDefaultTypeInternal;
extern MessageK2DDefaultTypeInternal _MessageK2D_default_instance_;
class Nop;
struct NopDefaultTypeInternal;
extern NopDefaultTypeInternal _Nop_default_instance_;
}  // namespace comm
}  // namespace uart
PROTOBUF_NAMESPACE_OPEN
template<> ::uart::comm::FnState* Arena::CreateMaybeMessage<::uart::comm::FnState>(Arena*);
template<> ::uart::comm::MessageK2D* Arena::CreateMaybeMessage<::uart::comm::MessageK2D>(Arena*);
template<> ::uart::comm::Nop* Arena::CreateMaybeMessage<::uart::comm::Nop>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uart {
namespace comm {

enum Action : int {
  NOP = 0,
  PING = 1,
  FN_STATE_CHANGED = 2
};
bool Action_IsValid(int value);
constexpr Action Action_MIN = NOP;
constexpr Action Action_MAX = FN_STATE_CHANGED;
constexpr int Action_ARRAYSIZE = Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor();
template<typename T>
inline const std::string& Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Action_descriptor(), enum_t_value);
}
inline bool Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Action>(
    Action_descriptor(), name, value);
}
// ===================================================================

class MessageK2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uart.comm.MessageK2D) */ {
 public:
  inline MessageK2D() : MessageK2D(nullptr) {}
  ~MessageK2D() override;
  explicit PROTOBUF_CONSTEXPR MessageK2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageK2D(const MessageK2D& from);
  MessageK2D(MessageK2D&& from) noexcept
    : MessageK2D() {
    *this = ::std::move(from);
  }

  inline MessageK2D& operator=(const MessageK2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageK2D& operator=(MessageK2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageK2D& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kNop = 2,
    kFnState = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const MessageK2D* internal_default_instance() {
    return reinterpret_cast<const MessageK2D*>(
               &_MessageK2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageK2D& a, MessageK2D& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageK2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageK2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageK2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageK2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageK2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageK2D& from) {
    MessageK2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageK2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uart.comm.MessageK2D";
  }
  protected:
  explicit MessageK2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kNopFieldNumber = 2,
    kFnStateFieldNumber = 3,
  };
  // required .uart.comm.Action action = 1;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::uart::comm::Action action() const;
  void set_action(::uart::comm::Action value);
  private:
  ::uart::comm::Action _internal_action() const;
  void _internal_set_action(::uart::comm::Action value);
  public:

  // .uart.comm.Nop nop = 2;
  bool has_nop() const;
  private:
  bool _internal_has_nop() const;
  public:
  void clear_nop();
  const ::uart::comm::Nop& nop() const;
  PROTOBUF_NODISCARD ::uart::comm::Nop* release_nop();
  ::uart::comm::Nop* mutable_nop();
  void set_allocated_nop(::uart::comm::Nop* nop);
  private:
  const ::uart::comm::Nop& _internal_nop() const;
  ::uart::comm::Nop* _internal_mutable_nop();
  public:
  void unsafe_arena_set_allocated_nop(
      ::uart::comm::Nop* nop);
  ::uart::comm::Nop* unsafe_arena_release_nop();

  // .uart.comm.FnState fn_state = 3;
  bool has_fn_state() const;
  private:
  bool _internal_has_fn_state() const;
  public:
  void clear_fn_state();
  const ::uart::comm::FnState& fn_state() const;
  PROTOBUF_NODISCARD ::uart::comm::FnState* release_fn_state();
  ::uart::comm::FnState* mutable_fn_state();
  void set_allocated_fn_state(::uart::comm::FnState* fn_state);
  private:
  const ::uart::comm::FnState& _internal_fn_state() const;
  ::uart::comm::FnState* _internal_mutable_fn_state();
  public:
  void unsafe_arena_set_allocated_fn_state(
      ::uart::comm::FnState* fn_state);
  ::uart::comm::FnState* unsafe_arena_release_fn_state();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:uart.comm.MessageK2D)
 private:
  class _Internal;
  void set_has_nop();
  void set_has_fn_state();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int action_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uart::comm::Nop* nop_;
      ::uart::comm::FnState* fn_state_;
    } payload_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class Nop final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:uart.comm.Nop) */ {
 public:
  inline Nop() : Nop(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Nop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Nop(const Nop& from);
  Nop(Nop&& from) noexcept
    : Nop() {
    *this = ::std::move(from);
  }

  inline Nop& operator=(const Nop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nop& operator=(Nop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Nop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Nop* internal_default_instance() {
    return reinterpret_cast<const Nop*>(
               &_Nop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Nop& a, Nop& b) {
    a.Swap(&b);
  }
  inline void Swap(Nop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Nop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Nop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Nop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Nop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uart.comm.Nop";
  }
  protected:
  explicit Nop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:uart.comm.Nop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_uart_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class FnState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uart.comm.FnState) */ {
 public:
  inline FnState() : FnState(nullptr) {}
  ~FnState() override;
  explicit PROTOBUF_CONSTEXPR FnState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FnState(const FnState& from);
  FnState(FnState&& from) noexcept
    : FnState() {
    *this = ::std::move(from);
  }

  inline FnState& operator=(const FnState& from) {
    CopyFrom(from);
    return *this;
  }
  inline FnState& operator=(FnState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FnState& default_instance() {
    return *internal_default_instance();
  }
  static inline const FnState* internal_default_instance() {
    return reinterpret_cast<const FnState*>(
               &_FnState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FnState& a, FnState& b) {
    a.Swap(&b);
  }
  inline void Swap(FnState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FnState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FnState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FnState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FnState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FnState& from) {
    FnState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FnState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uart.comm.FnState";
  }
  protected:
  explicit FnState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPressedFieldNumber = 1,
  };
  // required bool pressed = 1;
  bool has_pressed() const;
  private:
  bool _internal_has_pressed() const;
  public:
  void clear_pressed();
  bool pressed() const;
  void set_pressed(bool value);
  private:
  bool _internal_pressed() const;
  void _internal_set_pressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:uart.comm.FnState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool pressed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uart_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageK2D

// required .uart.comm.Action action = 1;
inline bool MessageK2D::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageK2D::has_action() const {
  return _internal_has_action();
}
inline void MessageK2D::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uart::comm::Action MessageK2D::_internal_action() const {
  return static_cast< ::uart::comm::Action >(_impl_.action_);
}
inline ::uart::comm::Action MessageK2D::action() const {
  // @@protoc_insertion_point(field_get:uart.comm.MessageK2D.action)
  return _internal_action();
}
inline void MessageK2D::_internal_set_action(::uart::comm::Action value) {
  assert(::uart::comm::Action_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_ = value;
}
inline void MessageK2D::set_action(::uart::comm::Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:uart.comm.MessageK2D.action)
}

// .uart.comm.Nop nop = 2;
inline bool MessageK2D::_internal_has_nop() const {
  return payload_case() == kNop;
}
inline bool MessageK2D::has_nop() const {
  return _internal_has_nop();
}
inline void MessageK2D::set_has_nop() {
  _impl_._oneof_case_[0] = kNop;
}
inline void MessageK2D::clear_nop() {
  if (_internal_has_nop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.nop_;
    }
    clear_has_payload();
  }
}
inline ::uart::comm::Nop* MessageK2D::release_nop() {
  // @@protoc_insertion_point(field_release:uart.comm.MessageK2D.nop)
  if (_internal_has_nop()) {
    clear_has_payload();
    ::uart::comm::Nop* temp = _impl_.payload_.nop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.nop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::uart::comm::Nop& MessageK2D::_internal_nop() const {
  return _internal_has_nop()
      ? *_impl_.payload_.nop_
      : reinterpret_cast< ::uart::comm::Nop&>(::uart::comm::_Nop_default_instance_);
}
inline const ::uart::comm::Nop& MessageK2D::nop() const {
  // @@protoc_insertion_point(field_get:uart.comm.MessageK2D.nop)
  return _internal_nop();
}
inline ::uart::comm::Nop* MessageK2D::unsafe_arena_release_nop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:uart.comm.MessageK2D.nop)
  if (_internal_has_nop()) {
    clear_has_payload();
    ::uart::comm::Nop* temp = _impl_.payload_.nop_;
    _impl_.payload_.nop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageK2D::unsafe_arena_set_allocated_nop(::uart::comm::Nop* nop) {
  clear_payload();
  if (nop) {
    set_has_nop();
    _impl_.payload_.nop_ = nop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uart.comm.MessageK2D.nop)
}
inline ::uart::comm::Nop* MessageK2D::_internal_mutable_nop() {
  if (!_internal_has_nop()) {
    clear_payload();
    set_has_nop();
    _impl_.payload_.nop_ = CreateMaybeMessage< ::uart::comm::Nop >(GetArenaForAllocation());
  }
  return _impl_.payload_.nop_;
}
inline ::uart::comm::Nop* MessageK2D::mutable_nop() {
  ::uart::comm::Nop* _msg = _internal_mutable_nop();
  // @@protoc_insertion_point(field_mutable:uart.comm.MessageK2D.nop)
  return _msg;
}

// .uart.comm.FnState fn_state = 3;
inline bool MessageK2D::_internal_has_fn_state() const {
  return payload_case() == kFnState;
}
inline bool MessageK2D::has_fn_state() const {
  return _internal_has_fn_state();
}
inline void MessageK2D::set_has_fn_state() {
  _impl_._oneof_case_[0] = kFnState;
}
inline void MessageK2D::clear_fn_state() {
  if (_internal_has_fn_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.fn_state_;
    }
    clear_has_payload();
  }
}
inline ::uart::comm::FnState* MessageK2D::release_fn_state() {
  // @@protoc_insertion_point(field_release:uart.comm.MessageK2D.fn_state)
  if (_internal_has_fn_state()) {
    clear_has_payload();
    ::uart::comm::FnState* temp = _impl_.payload_.fn_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.fn_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::uart::comm::FnState& MessageK2D::_internal_fn_state() const {
  return _internal_has_fn_state()
      ? *_impl_.payload_.fn_state_
      : reinterpret_cast< ::uart::comm::FnState&>(::uart::comm::_FnState_default_instance_);
}
inline const ::uart::comm::FnState& MessageK2D::fn_state() const {
  // @@protoc_insertion_point(field_get:uart.comm.MessageK2D.fn_state)
  return _internal_fn_state();
}
inline ::uart::comm::FnState* MessageK2D::unsafe_arena_release_fn_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:uart.comm.MessageK2D.fn_state)
  if (_internal_has_fn_state()) {
    clear_has_payload();
    ::uart::comm::FnState* temp = _impl_.payload_.fn_state_;
    _impl_.payload_.fn_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageK2D::unsafe_arena_set_allocated_fn_state(::uart::comm::FnState* fn_state) {
  clear_payload();
  if (fn_state) {
    set_has_fn_state();
    _impl_.payload_.fn_state_ = fn_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uart.comm.MessageK2D.fn_state)
}
inline ::uart::comm::FnState* MessageK2D::_internal_mutable_fn_state() {
  if (!_internal_has_fn_state()) {
    clear_payload();
    set_has_fn_state();
    _impl_.payload_.fn_state_ = CreateMaybeMessage< ::uart::comm::FnState >(GetArenaForAllocation());
  }
  return _impl_.payload_.fn_state_;
}
inline ::uart::comm::FnState* MessageK2D::mutable_fn_state() {
  ::uart::comm::FnState* _msg = _internal_mutable_fn_state();
  // @@protoc_insertion_point(field_mutable:uart.comm.MessageK2D.fn_state)
  return _msg;
}

inline bool MessageK2D::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MessageK2D::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MessageK2D::PayloadCase MessageK2D::payload_case() const {
  return MessageK2D::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Nop

// -------------------------------------------------------------------

// FnState

// required bool pressed = 1;
inline bool FnState::_internal_has_pressed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FnState::has_pressed() const {
  return _internal_has_pressed();
}
inline void FnState::clear_pressed() {
  _impl_.pressed_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FnState::_internal_pressed() const {
  return _impl_.pressed_;
}
inline bool FnState::pressed() const {
  // @@protoc_insertion_point(field_get:uart.comm.FnState.pressed)
  return _internal_pressed();
}
inline void FnState::_internal_set_pressed(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pressed_ = value;
}
inline void FnState::set_pressed(bool value) {
  _internal_set_pressed(value);
  // @@protoc_insertion_point(field_set:uart.comm.FnState.pressed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace uart

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::uart::comm::Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uart::comm::Action>() {
  return ::uart::comm::Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uart_5fcomm_2eproto
